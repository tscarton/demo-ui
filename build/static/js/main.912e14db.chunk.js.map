{"version":3,"sources":["services/auth.js","services/api.js","components/Login/Login.js","components/Customer/CustomerManager.js","components/Home/Home.js","route.js","App.js","serviceWorker.js","index.js"],"names":["logout","localStorage","removeItem","api","axios","create","baseURL","process","interceptors","request","use","a","config","token","getItem","headers","Authorization","Login","props","handleSignIn","e","preventDefault","state","username","password","loginData","post","response","authorization","replace","setItem","history","push","console","log","setState","loginError","setTimeout","this","className","Container","Form","onSubmit","Alert","color","isOpen","Col","FormGroup","Label","for","Input","type","name","id","placeholder","required","onChange","target","value","Button","React","Component","CustomerManager","deleteRow","customer","then","customers","filter","cust","email","closeConfirmDialog","catch","error","openConfirmDelete","openConfirmDialog","customerSelected","openEditDialog","birthday","Date","openEdit","addNewCustomer","creatingNew","updateCustomer","event","data","cancelEdit","get","_embedded","key","format","icon","faEdit","onClick","faTrash","Table","striped","map","renderRow","Modal","ModalHeader","ModalBody","ModalFooter","Home","doLogout","Navbar","light","expand","NavbarBrand","href","Collapse","navbar","Nav","NavbarText","PrivateRoute","component","rest","render","to","pathname","from","location","Routes","exact","path","App","count","Boolean","window","hostname","match","require","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.912e14db.chunk.js","sourcesContent":["export const TOKEN_KEY = \"@jwt-Token\";\nexport const isAuthenticated = () => localStorage.getItem(TOKEN_KEY) !== null;\nexport const getToken = () => localStorage.getItem(TOKEN_KEY);\nexport const login = token => {\n    token = token.replace(\"Bearer \", \"\");\n    localStorage.setItem(TOKEN_KEY, token);\n};\nexport const logout = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};","import axios from \"axios\";\nimport { getToken } from \"./auth\";\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\n\napi.interceptors.request.use(async config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport default api;","import React from 'react';\nimport './Login.scss';\nimport api from \"../../services/api\";\nimport { login } from \"../../services/auth\";\nimport {\n  Container, Col, Form,\n  FormGroup, Label, Input,\n  Button, Alert\n} from 'reactstrap';\n\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loginError: false\n    };\n  }\n\n  handleSignIn = async e => {\n    e.preventDefault();\n    const { username, password } = this.state;\n   try {\n        const loginData = {\"username\": username, \"password\": password}\n        const response = await api.post(\"/login\", loginData);\n        const authorization = response.headers.authorization;\n        login(authorization);\n        this.props.history.push(\"/app\");\n      } catch (err) {\n        console.log(\"Error login\");\n        this.setState({loginError: true});\n        setTimeout(()=> {\n          this.setState({loginError: false});\n        }, 2500)\n      }\n    \n  };\n\n  render() {\n    const { loginError } = this.state;\n    return (\n      <div className=\"Login\">\n     <Container className=\"App\">\n        <h2>Login</h2>\n        <Form className=\"form\" onSubmit={this.handleSignIn}>\n          <Alert color=\"danger\" isOpen={loginError}>\n            Invalid credentials.\n          </Alert>\n          <Col>\n            <FormGroup>\n              <Label for=\"username\">Username</Label>\n              <Input\n                type=\"text\"\n                name=\"username\"\n                id=\"username\"\n                className=\"w-50 offset-sm-3\" \n                placeholder=\"Username\" required\n                onChange={e => this.setState({ username: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <Label for=\"password\">Password</Label>\n              <Input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                className=\"w-50 offset-sm-3\"\n                placeholder=\"********\" required\n                onChange={e => this.setState({ password: e.target.value })}\n              />\n            </FormGroup>\n          </Col>\n          <Button type=\"submit\" color=\"primary\">Submit</Button>\n        </Form>\n      </Container>\n  </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport './CustomerManager.scss';\nimport api from \"../../services/api\";\nimport { Table, Button, Modal, ModalHeader, ModalBody, ModalFooter, Col, Form,\n  FormGroup, Label, Input } from 'reactstrap';\nimport Moment from 'react-moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\n \nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass CustomerManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      customers : [],\n      openConfirmDelete: false,\n      openEdit: false,\n      customerSelected: {}\n    }\n  }\n\n  deleteRow = (customer) => {\n\n    api.post(\"/customers/delete\", customer).then((response) => {\n      let customers = this.state.customers.filter(function(cust) { \n        return cust.email !== customer.email\n      })\n      this.setState({customers: customers});\n      this.closeConfirmDialog();\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n   \n  }\n\n  closeConfirmDialog = e => {\n    this.setState({openConfirmDelete: false});\n  }\n\n  openConfirmDialog = e => {\n    this.setState({openConfirmDelete: true, customerSelected: e});\n  }\n\n  openEditDialog = e => {\n    let customerSelected;\n    if (e == null) {\n      customerSelected = {\n        name: \"\",\n        email: \"\",\n        birthday: new Date()\n      };\n    } else {\n      customerSelected = e;\n    }\n    this.setState({openEdit: true, customerSelected: customerSelected});\n  }\n\n  addNewCustomer = e => {\n    this.setState({creatingNew: true});\n    this.openEditDialog(null);\n  }\n\n  componentDidMount() {\n      api.get(\"/customers\").then((response) => {\n        this.setState({\"customers\": response.data._embedded.customers});\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  }\n\n  updateCustomer = event => {\n    event.preventDefault();\n    console.log(\"Customer to update \", this.state.customerSelected);\n    api.post(\"/customers\", this.state.customerSelected).then((response) => {\n      let customers = this.state.customers;\n      customers.push(response.data);\n      this.setState({customers: customers, creatingNew: false, openEdit: false});\n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    });\n  }\n\n  cancelEdit = event => {\n    event.preventDefault();\n    this.setState({creatingNew: false, openEdit: false});\n  }\n\n  renderRow(customer) {\n    return (\n      <tr key={customer.email}>\n        <td>{customer.name}</td>\n        <td>{customer.email}</td>\n        <td><Moment format=\"DD-MMM-YYYY\">{customer.birthday}</Moment></td>\n        <td className=\"editRow\" ><FontAwesomeIcon icon={faEdit} /></td>\n        <td className=\"editRow\" onClick={() => this.openConfirmDialog(customer)}><FontAwesomeIcon icon={faTrash} /></td>\n      </tr>\n    );\n  }\n\n  \n  render() {\n    \n    const {openConfirmDelete, customerSelected, openEdit, creatingNew } = this.state;\n    return (\n        <div>\n          <Button color=\"primary\" className=\"addCustomer\" onClick={this.addNewCustomer}>Add</Button>{' '}\n\n          <Table striped>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Birthday</th>\n                <th></th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              { this.state.customers.map(this.renderRow, this) }\n            </tbody>\n          </Table>\n         \n          <Modal isOpen={openConfirmDelete}>\n            <ModalHeader >Confirm Delete</ModalHeader>\n            <ModalBody>\n              Are you sure to delete the customer {customerSelected.name}? \n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={() => this.deleteRow(customerSelected)}>Confirm</Button>{' '}\n              <Button color=\"secondary\" >Cancel</Button>\n            </ModalFooter>\n          </Modal>\n\n          <Modal isOpen={openEdit}>\n          <Form className=\"form\" onSubmit={this.updateCustomer}>\n            <ModalHeader >{creatingNew ? 'New Customer': 'Edit Customer'}</ModalHeader>\n            <ModalBody>\n           \n         \n          <Col>\n            <FormGroup>\n              <Label for=\"name\">Name</Label>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                placeholder=\"Name\" required\n                onChange={e => {\n                  customerSelected.name = e.target.value;\n                  this.setState({ customerSelected: customerSelected })\n                }}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <Label for=\"email\">Email</Label>\n              <Input\n                type=\"email\"\n                id=\"email\"\n                placeholder=\"email\" required\n                onChange={e => {\n                  customerSelected.email = e.target.value;\n                  this.setState({ customerSelected: customerSelected })\n                }}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <Label for=\"birthday\">Birthday</Label><br/>\n              <Input\n                type=\"date\"\n                id=\"birthday\"\n                placeholder=\"Birthday\" required\n                onChange={e => {\n                  customerSelected.birthday = e.target.value;\n                  this.setState({ customerSelected: customerSelected })\n                }}\n              />\n\n             \n             \n            </FormGroup>\n          </Col>\n        \n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\">Submit</Button>{' '}\n              <Button color=\"secondary\" onClick={this.cancelEdit}>Cancel</Button>\n            </ModalFooter>\n            </Form>\n          </Modal>\n\n          \n        </div>\n    );\n  }\n}\n\nexport default CustomerManager;\n","import React from 'react';\nimport CustomerManager from '../Customer/CustomerManager';\nimport './Home.scss';\nimport {\n    Collapse,\n    Navbar,\n    NavbarBrand,\n    Nav,\n    NavbarText\n  } from 'reactstrap';\nimport { logout } from \"../../services/auth\";\n\nclass Home extends React.Component {\n  \n  doLogout = async e => {\n    logout();\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    return (\n        <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/app\">Demo</NavbarBrand>\n          <Collapse isOpen={false} navbar>\n            <Nav className=\"mr-auto\" navbar />\n            <NavbarText onClick={this.doLogout} className=\"logout\">Logout</NavbarText>\n          </Collapse>\n        </Navbar>\n        <div>\n            <CustomerManager/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { isAuthenticated } from \"./services/auth\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      isAuthenticated() ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\n      )\n    }\n  />\n);\n\nconst Routes = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Login} />\n      <PrivateRoute path=\"/app\" component={Home} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Routes from './route';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Routes />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nrequire('dotenv').config()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}